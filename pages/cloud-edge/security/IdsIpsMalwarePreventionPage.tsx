import React, { useState, useMemo } from 'react';
import { Card, Button, Icon, ToggleSwitch, Modal, FormField, Pagination } from '@/components/ui';
import { v4 as uuidv4 } from 'uuid';

// --- TYPES AND MOCK DATA ---

interface IdsIpsRule {
  id: string;
  name: string;
  sources: string;
  destinations: string;
  services: string;
  profile: string;
  appliedTo: string;
  enabled: boolean;
}

interface IdsIpsPolicy {
  id: string;
  name: string;
  policyId: string;
  rules: IdsIpsRule[];
  isExpanded: boolean;
}

const initialRules: IdsIpsRule[] = [
    { id: 'rule-1', name: 'Block Critical Web Threats', sources: 'Any', destinations: 'Web Servers Group', services: 'HTTPS', profile: 'Strict - Detect & Prevent', appliedTo: 'Web Servers Group', enabled: true },
    { id: 'rule-2', name: 'Monitor DB Access for Anomalies', sources: 'App Servers Group', destinations: 'DB Servers Group', services: 'MySQL', profile: 'Lenient - Detect Only', appliedTo: 'DB Servers Group', enabled: true },
    { id: 'rule-3', name: 'Default Intranet Policy', sources: 'Any', destinations: 'Any', services: 'Any', profile: 'Balanced - Detect & Prevent', appliedTo: 'DFW', enabled: false },
];

const mockIdsIpsPoliciesData: IdsIpsPolicy[] = [
    { 
        id: 'policy-1', 
        name: 'Default IDS/IPS Section', 
        policyId: '(3)', 
        rules: initialRules, 
        isExpanded: true 
    },
    {
        id: 'policy-2',
        name: 'High Security Zone Policy',
        policyId: '(0)',
        rules: [],
        isExpanded: true
    }
];

interface IdsIpsProfile {
  id: string;
  name: string;
  isSystemDefined: boolean;
  description: string;
  tags: number;
  whereUsed: number;
  status: 'Success';
  isExpanded: boolean;
  details: {
    idsSignatures: {
      included: number;
      total: number;
      severities: { name: string; count: number }[];
    };
    additionalOptions: {
      attackTypes: number;
      attackTargets: number;
      cvss: number;
      productsAffected: number;
      packetCapture: boolean;
    };
    customSignatures: number;
  };
}

const mockInitialProfiles: IdsIpsProfile[] = [
    { 
      id: 'profile-1', 
      name: 'DefaultIDSProfile', 
      isSystemDefined: true, 
      description: '-', 
      tags: 0, 
      whereUsed: 1,
      status: 'Success',
      isExpanded: false,
      details: {
        idsSignatures: {
          included: 6173,
          total: 13892,
          severities: [
            { name: 'Critical', count: 6173 }
          ]
        },
        additionalOptions: {
          attackTypes: 0,
          attackTargets: 0,
          cvss: 0,
          productsAffected: 0,
          packetCapture: false,
        },
        customSignatures: 0,
      }
    },
    { 
      id: 'profile-2', 
      name: 'Sample Network Profile', 
      isSystemDefined: false, 
      description: '-', 
      tags: 0, 
      whereUsed: 1,
      status: 'Success',
      isExpanded: false,
      details: {
        idsSignatures: {
          included: 500,
          total: 10000,
          severities: [
            { name: 'High', count: 300 },
            { name: 'Medium', count: 200 }
          ]
        },
        additionalOptions: {
          attackTypes: 10,
          attackTargets: 5,
          cvss: 8,
          productsAffected: 20,
          packetCapture: true,
        },
        customSignatures: 5,
      }
    },
];

// --- MODALS ---

interface EditRuleModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSave: (rule: IdsIpsRule) => void;
    rule: IdsIpsRule | null;
}

const EditRuleModal: React.FC<EditRuleModalProps> = ({ isOpen, onClose, onSave, rule }) => {
    const [formData, setFormData] = useState<Omit<IdsIpsRule, 'id'>>({
        name: '', sources: 'Any', destinations: 'Any', services: 'Any', profile: 'Strict - Detect & Prevent', appliedTo: 'DFW', enabled: true
    });

    React.useEffect(() => {
        if (rule) {
            setFormData({ name: rule.name, sources: rule.sources, destinations: rule.destinations, services: rule.services, profile: rule.profile, appliedTo: rule.appliedTo, enabled: rule.enabled });
        } else {
            setFormData({ name: '', sources: 'Any', destinations: 'Any', services: 'Any', profile: 'Strict - Detect & Prevent', appliedTo: 'DFW', enabled: true });
        }
    }, [rule, isOpen]);

    // FIX: Widened the type of 'e' to include HTMLTextAreaElement to match the FormField's onChange prop.
    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        if (!formData.name.trim()) { alert('Rule name is required.'); return; }
        onSave({ id: rule?.id || uuidv4(), ...formData });
    };

    const mockAvailableGroups = ['Any', 'Web Servers Group', 'DB Servers Group', 'App Servers Group', 'Admin IP Group', 'Mgmt Group'];
    const mockAvailableServices = ['Any', 'HTTP', 'HTTPS', 'SSH', 'MySQL'];

    return (
        <Modal 
            isOpen={isOpen} onClose={onClose} title={rule ? 'Edit IDS/IPS Rule' : 'Add IDS/IPS Rule'} size="2xl"
            footer={<><Button variant="ghost" onClick={onClose}>Cancel</Button><Button onClick={handleSave}>Save</Button></>}
        >
            <div className="space-y-4">
                <FormField id="name" name="name" label="Rule Name" value={formData.name} onChange={handleChange} required />
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField as="select" id="sources" name="sources" label="Sources" value={formData.sources} onChange={handleChange}>{mockAvailableGroups.map(g => <option key={g} value={g}>{g}</option>)}</FormField>
                    <FormField as="select" id="destinations" name="destinations" label="Destinations" value={formData.destinations} onChange={handleChange}>{mockAvailableGroups.map(g => <option key={g} value={g}>{g}</option>)}</FormField>
                </div>
                <FormField as="select" id="services" name="services" label="Services" value={formData.services} onChange={handleChange}>{mockAvailableServices.map(s => <option key={s} value={s}>{s}</option>)}</FormField>
                <FormField as="select" id="profile" name="profile" label="Profile" value={formData.profile} onChange={(e) => handleChange(e)}>{mockInitialProfiles.map(p => <option key={p.id} value={p.name}>{p.name}</option>)}</FormField>
                <FormField as="select" id="appliedTo" name="appliedTo" label="Applied To" value={formData.appliedTo} onChange={handleChange}><option value="DFW">DFW (Distributed Firewall)</option>{mockAvailableGroups.filter(g => g !== 'Any').map(g => <option key={g} value={g}>{g}</option>)}</FormField>
            </div>
        </Modal>
    );
};

// --- VIEWS / TABS ---

const RulesView: React.FC = () => {
    const [policies, setPolicies] = useState<IdsIpsPolicy[]>(mockIdsIpsPoliciesData);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingRule, setEditingRule] = useState<IdsIpsRule | null>(null);
    const [selectedItems, setSelectedItems] = useState<string[]>([]);

    const isSinglePolicySelected = useMemo(() => {
        if (selectedItems.length !== 1) return false;
        return policies.some(p => p.id === selectedItems[0]);
    }, [selectedItems, policies]);

    const handleOpenModal = (rule: IdsIpsRule | null) => {
        setEditingRule(rule);
        setIsModalOpen(true);
    };
    
    const handleAddRuleClick = () => {
        if (isSinglePolicySelected) {
            handleOpenModal(null);
        }
    };

    const handleSaveRule = (ruleData: IdsIpsRule) => {
        setPolicies(prevPolicies => {
            if (editingRule) { // Update existing rule
                return prevPolicies.map(p => ({
                    ...p,
                    rules: p.rules.map(r => (r.id === ruleData.id ? ruleData : r))
                }));
            } else { // Add new rule
                const targetPolicyId = selectedItems[0];
                return prevPolicies.map(p => 
                    p.id === targetPolicyId
                        ? { ...p, rules: [ruleData, ...p.rules] }
                        : p
                );
            }
        });
        setIsModalOpen(false);
        setEditingRule(null);
    };

    const handleToggleRule = (policyId: string, ruleId: string) => {
        setPolicies(prev => prev.map(p => 
            p.id === policyId 
                ? { ...p, rules: p.rules.map(r => r.id === ruleId ? { ...r, enabled: !r.enabled } : r) } 
                : p
        ));
    };
    
    const togglePolicy = (policyId: string) => {
        setPolicies(currentPolicies => currentPolicies.map(p =>
            p.id === policyId ? { ...p, isExpanded: !p.isExpanded } : p
        ));
    };

    const handleSelect = (id: string) => {
        setSelectedItems(prev => prev.includes(id) ? prev.filter(i => i !== id) : [id]); // Single select for simplicity
    };

    return (
        <>
            <div className="flex items-center space-x-2 py-2 mb-2">
                <Button variant="outline" size="sm" leftIconName="fas fa-plus-circle">ADD POLICY</Button>
                <Button variant="outline" size="sm" leftIconName="fas fa-plus" disabled={!isSinglePolicySelected} onClick={handleAddRuleClick}>ADD RULE</Button>
            </div>
             <div className="overflow-x-auto border rounded-lg dark:border-gray-700">
                <table className="min-w-full w-full divide-y divide-gray-200 dark:divide-gray-700 table-fixed">
                    <thead className="bg-gray-50 dark:bg-slate-700">
                        <tr>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[25%]">Name</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Sources</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Destinations</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Services</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[20%]">Profile</th>
                            <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Applied To</th>
                            <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[5%]">Enabled</th>
                        </tr>
                    </thead>
                    <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-gray-700">
                        {policies.map(policy => (
                            <React.Fragment key={policy.id}>
                                <tr className="bg-gray-50 dark:bg-slate-700/50 hover:bg-gray-100 dark:hover:bg-slate-700 h-[52px]">
                                    <td className="px-4 py-3 text-sm text-[#293c51] dark:text-gray-200 truncate" colSpan={7}>
                                        <div className="flex items-center gap-x-2">
                                            <button onClick={() => togglePolicy(policy.id)} className="text-gray-500 w-5 text-center flex-shrink-0">
                                                <Icon name={policy.isExpanded ? 'fas fa-chevron-down' : 'fas fa-chevron-right'} />
                                            </button>
                                            <input type="checkbox" checked={selectedItems.includes(policy.id)} onChange={() => handleSelect(policy.id)} className="bg-gray-100 border-gray-300 rounded text-sky-500 focus:ring-sky-500 flex-shrink-0" />
                                            <span className="font-semibold">{policy.name}</span>
                                            <span className="text-gray-500 dark:text-gray-400 font-normal">{policy.policyId}</span>
                                        </div>
                                    </td>
                                </tr>
                                {policy.isExpanded && policy.rules.map(rule => (
                                    <tr key={rule.id} className="h-[52px]">
                                        <td className="px-4 py-3 text-sm text-[#293c51] dark:text-gray-200 truncate"><div className="pl-6">{rule.name}</div></td>
                                        <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.sources}</td>
                                        <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.destinations}</td>
                                        <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.services}</td>
                                        <td className="px-4 py-3 text-sm font-medium truncate">{rule.profile}</td>
                                        <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.appliedTo}</td>
                                        <td className="px-4 py-3 text-center">
                                            <ToggleSwitch size="sm" id={`toggle-${rule.id}`} checked={rule.enabled} onChange={() => handleToggleRule(policy.id, rule.id)} />
                                        </td>
                                    </tr>
                                ))}
                            </React.Fragment>
                        ))}
                    </tbody>
                </table>
            </div>
            <EditRuleModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onSave={handleSaveRule} rule={editingRule} />
        </>
    );
}

const ProfilesView: React.FC = () => {
    const [profiles, setProfiles] = useState<IdsIpsProfile[]>(mockInitialProfiles);
    const [filterTerm, setFilterTerm] = useState('');
    const [currentPage, setCurrentPage] = useState(1);
    const [rowsPerPage, setRowsPerPage] = useState(50); // As in image
    const [isRefreshing, setIsRefreshing] = useState(false);
    const [selectedProfiles, setSelectedProfiles] = useState<string[]>([]);

    const filteredProfiles = useMemo(() => {
        if (!filterTerm) return profiles;
        return profiles.filter(p => 
            p.name.toLowerCase().includes(filterTerm.toLowerCase()) ||
            p.description.toLowerCase().includes(filterTerm.toLowerCase())
        );
    }, [profiles, filterTerm]);
    
    const paginatedProfiles = useMemo(() => {
        const startIndex = (currentPage - 1) * rowsPerPage;
        return filteredProfiles.slice(startIndex, startIndex + rowsPerPage);
    }, [filteredProfiles, currentPage, rowsPerPage]);

    const handleRefresh = () => {
        setIsRefreshing(true);
        setTimeout(() => setIsRefreshing(false), 1000);
    };
    
    const toggleProfile = (profileId: string) => {
        setProfiles(prev => 
            prev.map(p => p.id === profileId ? { ...p, isExpanded: !p.isExpanded } : p)
        );
    };

    const toggleExpandAll = () => {
        const areSomeCollapsed = profiles.some(p => !p.isExpanded);
        setProfiles(prev => prev.map(p => ({ ...p, isExpanded: areSomeCollapsed })));
    };

    const handleSelectOne = (id: string, checked: boolean) => {
        setSelectedProfiles(prev => checked ? [...prev, id] : prev.filter(pId => pId !== id));
    };

    const handleSelectAll = (checked: boolean) => {
        setSelectedProfiles(checked ? paginatedProfiles.map(p => p.id) : []);
    };
    
    const areAllOnPageSelected = useMemo(() => {
        if (paginatedProfiles.length === 0) return false;
        return paginatedProfiles.every(p => selectedProfiles.includes(p.id));
    }, [paginatedProfiles, selectedProfiles]);

    return (
        <>
            <div className="flex justify-between items-center py-2 mb-2">
                <Button>ADD PROFILE</Button>
                <div className="flex items-center gap-4">
                    <Button variant="ghost" size="sm" onClick={toggleExpandAll}>
                        EXPAND ALL
                    </Button>
                    <div className="w-72 relative">
                        <FormField
                        id="profile-filter"
                        label=""
                        placeholder="Filter by Name, Path and more"
                        value={filterTerm}
                        onChange={(e) => setFilterTerm(e.target.value)}
                        wrapperClassName="!mb-0"
                        />
                        <Icon name="fas fa-bars" className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" />
                    </div>
                </div>
            </div>

            <div className="overflow-x-auto border rounded-lg dark:border-gray-700">
                <table className="min-w-full">
                <thead className="bg-gray-50 dark:bg-slate-700">
                    <tr>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[35%]">
                        <div className="flex items-center gap-3">
                            <input type="checkbox" className="rounded" checked={areAllOnPageSelected} onChange={(e) => handleSelectAll(e.target.checked)} />
                            <span>Name</span>
                        </div>
                    </th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[25%]">Description</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Tags</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Where Used</th>
                    <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[15%]">Status</th>
                    </tr>
                </thead>
                <tbody className="bg-white dark:bg-slate-800">
                    {paginatedProfiles.map(profile => (
                    <React.Fragment key={profile.id}>
                    <tr className="border-b border-gray-200 dark:border-slate-700">
                        <td className="px-4 py-3 text-sm font-medium text-[#293c51] dark:text-gray-200">
                        <div className="flex items-center gap-3">
                            <input type="checkbox" className="rounded" checked={selectedProfiles.includes(profile.id)} onChange={(e) => handleSelectOne(profile.id, e.target.checked)} />
                            <button onClick={() => toggleProfile(profile.id)} className="w-4">
                                <Icon name={profile.isExpanded ? "fas fa-chevron-down" : "fas fa-chevron-right"} className="text-gray-500" />
                            </button>
                            {profile.isSystemDefined && <Icon name="fas fa-lock" className="text-gray-500" title="System Defined" />}
                            <span>{profile.name}</span>
                        </div>
                        </td>
                        <td className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">{profile.description}</td>
                        <td className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">{profile.tags}</td>
                        <td className="px-4 py-3 text-sm">
                            <a href="#" className="text-sky-500 hover:underline">Where Used</a>
                        </td>
                        <td className="px-4 py-3 text-sm">
                            <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
                                <Icon name="fas fa-check-circle" />
                                <span className="font-semibold">Success</span>
                                <Icon name="fas fa-sync-alt" className="text-sky-500 cursor-pointer" />
                            </div>
                        </td>
                    </tr>
                    {profile.isExpanded && (
                        <tr>
                            <td colSpan={5} className="p-0 bg-gray-50 dark:bg-slate-800/50">
                                <div className="p-6">
                                    <div className="grid grid-cols-12 gap-x-8 gap-y-4 text-sm">
                                        <div className="col-span-12 md:col-span-4">
                                            <p className="font-semibold text-gray-700 dark:text-gray-300">IDS Signatures</p>
                                            <p className="text-gray-500 dark:text-gray-400 mt-1">Included: <span className="font-bold text-sky-500">{profile.details.idsSignatures.included}</span> Total: {profile.details.idsSignatures.total}</p>
                                            <ul className="pl-5 mt-2 space-y-1">
                                                {profile.details.idsSignatures.severities.map(s => (
                                                    <li key={s.name} className="flex items-center">
                                                        <span className="w-2 h-2 rounded-full bg-blue-500 mr-2"></span>
                                                        <span className="text-gray-600 dark:text-gray-300">{s.name} ({s.count})</span>
                                                    </li>
                                                ))}
                                            </ul>
                                        </div>
                                        <div className="col-span-12 md:col-span-8">
                                            <p className="font-semibold text-gray-700 dark:text-gray-300">Additional Options</p>
                                            <div className="grid grid-cols-2 gap-x-8 gap-y-2 mt-1 text-gray-600 dark:text-gray-300">
                                                <div className="flex justify-between"><span>Attack Types</span><span>{profile.details.additionalOptions.attackTypes}</span></div>
                                                <div className="flex justify-between"><span>CVSS</span><span>{profile.details.additionalOptions.cvss}</span></div>
                                                <div className="flex justify-between"><span>Attack Targets</span><span>{profile.details.additionalOptions.attackTargets}</span></div>
                                                <div className="flex justify-between"><span>Products Affected</span><span>{profile.details.additionalOptions.productsAffected}</span></div>
                                                <div className="flex justify-between col-span-2">
                                                    <span>Packet Capture</span>
                                                    <div className="flex items-center gap-2">
                                                        <span className={`w-3 h-3 rounded-full ${profile.details.additionalOptions.packetCapture ? 'bg-green-500' : 'bg-gray-400'}`}></span>
                                                        <span>{profile.details.additionalOptions.packetCapture ? 'On' : 'Off'}</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div className="col-span-12 pt-4 border-t border-gray-200 dark:border-slate-700">
                                            <div className="flex justify-between">
                                                <p className="text-gray-600 dark:text-gray-300">Customized actions and/or excluded signatures specific to this profile.</p>
                                                <p className="font-semibold">{profile.details.customSignatures}</p>
                                            </div>
                                            <p className="text-xs text-gray-400 dark:text-gray-500 mt-2">Note: The available list of customized intrusion signatures is based upon the selected attributes above.</p>
                                        </div>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    )}
                    </React.Fragment>
                    ))}
                </tbody>
                </table>
            </div>
            <div className="flex justify-between items-center py-3 px-4">
                <Button variant="ghost" size="sm" onClick={handleRefresh} disabled={isRefreshing}>
                    <Icon name={`fas fa-sync-alt ${isRefreshing ? 'fa-spin' : ''}`} className="text-sky-500 mr-2" /> REFRESH
                </Button>
                <Pagination
                    currentPage={currentPage}
                    totalItems={filteredProfiles.length}
                    itemsPerPage={rowsPerPage}
                    onPageChange={setCurrentPage}
                    onItemsPerPageChange={setRowsPerPage}
                    className="border-t-0 !py-0 !px-0"
                />
            </div>
        </>
    )
}

// --- MAIN PAGE COMPONENT ---

export const IdsIpsMalwarePreventionPage: React.FC = () => {
    const [isServiceEnabled, setIsServiceEnabled] = useState(true);
    const [activeTab, setActiveTab] = useState('rules');

    const tabs = [
        { id: 'rules', name: 'Distributed Rules' },
        { id: 'profiles', name: 'Profiles' }
    ];

    return (
        <Card>
            <div className="p-6">
                <div className="flex justify-between items-center pb-4 mb-4 border-b border-gray-200 dark:border-slate-700">
                    <div>
                        <h1 className="text-2xl font-semibold text-[#293c51] dark:text-gray-100">IDS/IPS & Malware Prevention</h1>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Configure rules to detect and prevent network intrusions and malware.</p>
                    </div>
                    <div className="flex items-center gap-4">
                        <span className="font-medium text-sm">Service Status</span>
                        <ToggleSwitch id="service-status-toggle" checked={isServiceEnabled} onChange={setIsServiceEnabled} />
                    </div>
                </div>

                <div className="border-b border-gray-200 dark:border-slate-700 mb-4">
                    <nav className="-mb-px flex space-x-6">
                        {tabs.map(tab => (
                            <button
                                key={tab.id}
                                onClick={() => setActiveTab(tab.id)}
                                className={`whitespace-nowrap py-3 px-1 border-b-2 font-medium text-sm ${activeTab === tab.id ? 'border-[#679a41] dark:border-emerald-500 text-[#679a41] dark:text-emerald-400' : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-[#293c51] dark:hover:text-gray-200'}`}
                            >
                                {tab.name}
                            </button>
                        ))}
                    </nav>
                </div>
                
                {activeTab === 'rules' && <RulesView />}
                {activeTab === 'profiles' && <ProfilesView />}
            </div>
        </Card>
    );
};
