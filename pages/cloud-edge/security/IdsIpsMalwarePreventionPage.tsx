
import React, { useState, useMemo } from 'react';
import { Card, Button, Icon, ToggleSwitch, Modal, FormField } from '@/components/ui';
import { v4 as uuidv4 } from 'uuid';

interface IdsIpsRule {
  id: string;
  name: string;
  sources: string;
  destinations: string;
  services: string;
  profile: string;
  appliedTo: string;
  enabled: boolean;
}

interface IdsIpsPolicy {
  id: string;
  name: string;
  policyId: string;
  rules: IdsIpsRule[];
  isExpanded: boolean;
}

const mockIdsIpsProfiles = [
    { id: 'profile-1', name: 'Strict - Detect & Prevent', description: 'Blocks known high-severity threats.' },
    { id: 'profile-2', name: 'Balanced - Detect & Prevent', description: 'Blocks common threats with minimal performance impact.' },
    { id: 'profile-3', name: 'Lenient - Detect Only', description: 'Logs potential threats without blocking traffic.' },
    { id: 'profile-4', name: 'Custom Web Profile', description: 'Specific ruleset for public-facing web servers.' },
];

const mockAvailableGroups = [
    'Any',
    'Web Servers Group',
    'DB Servers Group',
    'App Servers Group',
    'Admin IP Group',
    'Mgmt Group',
];

const mockAvailableServices = [
    'Any',
    'HTTP',
    'HTTPS',
    'SSH',
    'MySQL',
];

const initialRules: IdsIpsRule[] = [
    { id: 'rule-1', name: 'Block Critical Web Threats', sources: 'Any', destinations: 'Web Servers Group', services: 'HTTPS', profile: 'Strict - Detect & Prevent', appliedTo: 'Web Servers Group', enabled: true },
    { id: 'rule-2', name: 'Monitor DB Access for Anomalies', sources: 'App Servers Group', destinations: 'DB Servers Group', services: 'MySQL', profile: 'Lenient - Detect Only', appliedTo: 'DB Servers Group', enabled: true },
    { id: 'rule-3', name: 'Default Intranet Policy', sources: 'Any', destinations: 'Any', services: 'Any', profile: 'Balanced - Detect & Prevent', appliedTo: 'DFW', enabled: false },
];

const mockIdsIpsPoliciesData: IdsIpsPolicy[] = [
    { 
        id: 'policy-1', 
        name: 'Default IDS/IPS Section', 
        policyId: '(3)', 
        rules: initialRules, 
        isExpanded: true 
    },
    {
        id: 'policy-2',
        name: 'High Security Zone Policy',
        policyId: '(0)',
        rules: [],
        isExpanded: true
    }
];


interface EditRuleModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSave: (rule: IdsIpsRule) => void;
    rule: IdsIpsRule | null;
}

const EditRuleModal: React.FC<EditRuleModalProps> = ({ isOpen, onClose, onSave, rule }) => {
    const [formData, setFormData] = useState<Omit<IdsIpsRule, 'id'>>({
        name: '',
        sources: 'Any',
        destinations: 'Any',
        services: 'Any',
        profile: mockIdsIpsProfiles[0].id,
        appliedTo: 'DFW',
        enabled: true
    });

    React.useEffect(() => {
        if (rule) {
            setFormData({
                name: rule.name,
                sources: rule.sources,
                destinations: rule.destinations,
                services: rule.services,
                profile: rule.profile,
                appliedTo: rule.appliedTo,
                enabled: rule.enabled,
            });
        } else {
            setFormData({
                name: '',
                sources: 'Any',
                destinations: 'Any',
                services: 'Any',
                profile: mockIdsIpsProfiles[0].name,
                appliedTo: 'DFW',
                enabled: true
            });
        }
    }, [rule, isOpen]);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSave = () => {
        if (!formData.name.trim()) {
            alert('Rule name is required.');
            return;
        }
        onSave({ id: rule?.id || uuidv4(), ...formData });
    };

    return (
        <Modal 
            isOpen={isOpen} 
            onClose={onClose} 
            title={rule ? 'Edit IDS/IPS Rule' : 'Add IDS/IPS Rule'}
            size="2xl"
            footer={<><Button variant="ghost" onClick={onClose}>Cancel</Button><Button onClick={handleSave}>Save</Button></>}
        >
            <div className="space-y-4">
                <FormField id="name" name="name" label="Rule Name" value={formData.name} onChange={handleChange} required />
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField as="select" id="sources" name="sources" label="Sources" value={formData.sources} onChange={handleChange}>
                        {mockAvailableGroups.map(g => <option key={g} value={g}>{g}</option>)}
                    </FormField>
                    <FormField as="select" id="destinations" name="destinations" label="Destinations" value={formData.destinations} onChange={handleChange}>
                        {mockAvailableGroups.map(g => <option key={g} value={g}>{g}</option>)}
                    </FormField>
                </div>
                <FormField as="select" id="services" name="services" label="Services" value={formData.services} onChange={handleChange}>
                    {mockAvailableServices.map(s => <option key={s} value={s}>{s}</option>)}
                </FormField>
                <FormField as="select" id="profile" name="profile" label="Profile" value={formData.profile} onChange={handleChange}>
                    {mockIdsIpsProfiles.map(p => <option key={p.id} value={p.name}>{p.name}</option>)}
                </FormField>
                 <FormField as="select" id="appliedTo" name="appliedTo" label="Applied To" value={formData.appliedTo} onChange={handleChange}>
                     <option value="DFW">DFW (Distributed Firewall)</option>
                     {mockAvailableGroups.filter(g => g !== 'Any').map(g => <option key={g} value={g}>{g}</option>)}
                </FormField>
            </div>
        </Modal>
    );
};

export const IdsIpsMalwarePreventionPage: React.FC = () => {
    const [isServiceEnabled, setIsServiceEnabled] = useState(true);
    const [policies, setPolicies] = useState<IdsIpsPolicy[]>(mockIdsIpsPoliciesData);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingRule, setEditingRule] = useState<IdsIpsRule | null>(null);
    const [selectedItems, setSelectedItems] = useState<string[]>([]);

    const isSinglePolicySelected = useMemo(() => {
        if (selectedItems.length !== 1) return false;
        return policies.some(p => p.id === selectedItems[0]);
    }, [selectedItems, policies]);

    const handleOpenModal = (rule: IdsIpsRule | null) => {
        setEditingRule(rule);
        setIsModalOpen(true);
    };
    
    const handleAddRuleClick = () => {
        if (isSinglePolicySelected) {
            handleOpenModal(null);
        }
    };

    const handleSaveRule = (ruleData: IdsIpsRule) => {
        setPolicies(prevPolicies => {
            if (editingRule) { // Update existing rule
                return prevPolicies.map(p => ({
                    ...p,
                    rules: p.rules.map(r => (r.id === ruleData.id ? ruleData : r))
                }));
            } else { // Add new rule
                const targetPolicyId = selectedItems[0];
                return prevPolicies.map(p => 
                    p.id === targetPolicyId
                        ? { ...p, rules: [ruleData, ...p.rules] }
                        : p
                );
            }
        });
        setIsModalOpen(false);
        setEditingRule(null);
    };

    const handleToggleRule = (policyId: string, ruleId: string) => {
        setPolicies(prev => prev.map(p => 
            p.id === policyId 
                ? { ...p, rules: p.rules.map(r => r.id === ruleId ? { ...r, enabled: !r.enabled } : r) } 
                : p
        ));
    };
    
    const togglePolicy = (policyId: string) => {
        setPolicies(currentPolicies => currentPolicies.map(p =>
            p.id === policyId ? { ...p, isExpanded: !p.isExpanded } : p
        ));
    };

    const handleSelect = (id: string) => {
        setSelectedItems(prev => prev.includes(id) ? prev.filter(i => i !== id) : [id]); // Single select for simplicity
    };


    return (
        <Card>
            <div className="p-6">
                <div className="flex justify-between items-center pb-4 mb-4 border-b border-gray-200 dark:border-slate-700">
                    <div>
                        <h1 className="text-2xl font-semibold text-[#293c51] dark:text-gray-100">IDS/IPS & Malware Prevention</h1>
                        <p className="text-sm text-gray-500 dark:text-gray-400">Configure rules to detect and prevent network intrusions and malware.</p>
                    </div>
                    <div className="flex items-center gap-4">
                        <span className="font-medium text-sm">Service Status</span>
                        <ToggleSwitch id="service-status-toggle" checked={isServiceEnabled} onChange={setIsServiceEnabled} />
                    </div>
                </div>

                <div className="flex items-center space-x-2 py-2 mb-2">
                    <Button variant="outline" size="sm" leftIconName="fas fa-plus-circle" onClick={() => alert('Add policy functionality not implemented in this demo.')}>ADD POLICY</Button>
                    <Button variant="outline" size="sm" leftIconName="fas fa-plus" disabled={!isSinglePolicySelected} onClick={handleAddRuleClick}>ADD RULE</Button>
                    <div className="flex-grow"></div>
                    <Button variant="primary">PUBLISH</Button>
                </div>

                <div className="overflow-x-auto border rounded-lg dark:border-gray-700">
                    <table className="min-w-full w-full divide-y divide-gray-200 dark:divide-gray-700 table-fixed">
                        <thead className="bg-gray-50 dark:bg-slate-700">
                            <tr>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[25%]">Name</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Sources</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Destinations</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Services</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[20%]">Profile</th>
                                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[12.5%]">Applied To</th>
                                <th className="px-4 py-3 text-center text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[10%]">Action</th>
                                <th className="relative px-4 py-3 w-[5%]"><span className="sr-only">Actions</span></th>
                            </tr>
                        </thead>
                        <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-gray-700">
                            {policies.map(policy => (
                                <React.Fragment key={policy.id}>
                                    <tr className="bg-gray-50 dark:bg-slate-700/50 hover:bg-gray-100 dark:hover:bg-slate-700 h-[52px]">
                                        <td className="px-4 py-3 text-sm text-[#293c51] dark:text-gray-200 truncate" colSpan={3}>
                                            <div className="flex items-center gap-x-2">
                                                <button onClick={() => togglePolicy(policy.id)} className="text-gray-500 w-5 text-center flex-shrink-0">
                                                    <Icon name={policy.isExpanded ? 'fas fa-chevron-down' : 'fas fa-chevron-right'} />
                                                </button>
                                                <input type="checkbox" checked={selectedItems.includes(policy.id)} onChange={() => handleSelect(policy.id)} className="bg-gray-100 border-gray-300 rounded text-sky-500 focus:ring-sky-500 flex-shrink-0" />
                                                <span className="font-semibold">{policy.name}</span>
                                                <span className="text-gray-500 dark:text-gray-400 font-normal">{policy.policyId}</span>
                                            </div>
                                        </td>
                                        <td colSpan={5}></td>
                                    </tr>
                                    {policy.isExpanded && policy.rules.map(rule => (
                                        <tr key={rule.id} className="h-[52px]">
                                            <td className="px-4 py-3 text-sm text-[#293c51] dark:text-gray-200 truncate">
                                                <div className="flex items-center gap-x-2 pl-6">
                                                    {rule.name}
                                                </div>
                                            </td>
                                            <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.sources}</td>
                                            <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.destinations}</td>
                                            <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.services}</td>
                                            <td className="px-4 py-3 text-sm font-medium truncate">{rule.profile}</td>
                                            <td className="px-4 py-3 text-sm text-sky-500 truncate">{rule.appliedTo}</td>
                                            <td className="px-4 py-3 text-center">
                                                <div className="flex items-center justify-center gap-1">
                                                    <ToggleSwitch size="sm" id={`toggle-${rule.id}`} checked={rule.enabled} onChange={() => handleToggleRule(policy.id, rule.id)} />
                                                    <Button size="icon" variant="ghost" title="Settings" className="text-gray-400 hover:text-sky-500">
                                                        <Icon name="fas fa-cog" />
                                                    </Button>
                                                    <Button size="icon" variant="ghost" title="Statistics" className="text-gray-400 hover:text-sky-500">
                                                        <Icon name="fas fa-chart-bar" />
                                                    </Button>
                                                </div>
                                            </td>
                                            <td className="px-4 py-3 text-right">
                                                {/* Edit button removed as requested */}
                                            </td>
                                        </tr>
                                    ))}
                                </React.Fragment>
                            ))}
                        </tbody>
                    </table>
                </div>
            </div>
            <EditRuleModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onSave={handleSaveRule} rule={editingRule} />
        </Card>
    );
};