import React, { useState, useMemo } from 'react';
import { Card, Button, FormField, Icon, Pagination } from '@/components/ui';

interface ContextProfile {
  id: string;
  name: string;
  isSystemDefined: boolean;
  attributes: string;
  description: string;
  tags: number;
  whereUsed: number;
  status: 'Success';
}

const generateMockProfiles = (count: number): ContextProfile[] => {
    const baseProfiles: Omit<ContextProfile, 'id'>[] = [
      { name: '360ANTIV', isSystemDefined: true, attributes: '360ANTIV', description: '360 Safeguard is a program developed by Qihoo 360', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'ACTIVDIR', isSystemDefined: true, attributes: 'ACTIVDIR', description: 'Microsoft Active Directory', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AMQP', isSystemDefined: true, attributes: 'AMQP', description: 'Advanced Message Queueing Protocol (AMQP) is an application layer protocol which supports business message communication between applications or organizations', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVAST', isSystemDefined: true, attributes: 'AVAST', description: 'Traffic generated by browsing Avast.com official website of Avast! Antivirus downloads.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVG', isSystemDefined: true, attributes: 'AVG', description: 'AVG Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'AVIRA', isSystemDefined: true, attributes: 'AVIRA', description: 'Avira Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'BDEFNDER', isSystemDefined: true, attributes: 'BDEFNDER', description: 'BitDefender Antivirus/Security software download and updates.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'BLAST', isSystemDefined: true, attributes: 'BLAST', description: 'VMware Blast Protocol', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'CA_CERT', isSystemDefined: true, attributes: 'CA_CERT', description: 'Certification authority (CA) issues digital certificates which certifies the ownership of a public key for message encryption.', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'CITRIX', isSystemDefined: true, attributes: 'CITRIX', description: 'Citrix ICA Protocol', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'DNS', isSystemDefined: true, attributes: 'DNS', description: 'Domain Name System', tags: 0, whereUsed: 0, status: 'Success' },
      { name: 'DROPBOX', isSystemDefined: true, attributes: 'DROPBOX', description: 'Dropbox File Sharing', tags: 0, whereUsed: 0, status: 'Success' },
    ];
    
    const allProfiles: ContextProfile[] = [];
    for (let i = 0; i < count; i++) {
        const base = baseProfiles[i % baseProfiles.length];
        allProfiles.push({
            ...base,
            id: `profile-${i + 1}`,
            name: `${base.name}${i >= baseProfiles.length ? `_${Math.floor(i / baseProfiles.length)}` : ''}`,
        });
    }
    return allProfiles;
};

const mockContextProfiles: ContextProfile[] = generateMockProfiles(70);


export const PoliciesPage: React.FC = () => {
  const [profiles] = useState<ContextProfile[]>(mockContextProfiles);
  const [filterTerm, setFilterTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(50); // As in image
  const [isRefreshing, setIsRefreshing] = useState(false);

  const filteredProfiles = useMemo(() => {
    if (!filterTerm) return profiles;
    return profiles.filter(p => 
      p.name.toLowerCase().includes(filterTerm.toLowerCase()) ||
      p.description.toLowerCase().includes(filterTerm.toLowerCase())
    );
  }, [profiles, filterTerm]);
  
  const paginatedProfiles = useMemo(() => {
    const startIndex = (currentPage - 1) * rowsPerPage;
    return filteredProfiles.slice(startIndex, startIndex + rowsPerPage);
  }, [filteredProfiles, currentPage, rowsPerPage]);

  const handleRefresh = () => {
      setIsRefreshing(true);
      setTimeout(() => setIsRefreshing(false), 1000);
  };

  return (
    <Card>
      <div className="flex justify-between items-center mb-4">
        <Button>ADD CONTEXT PROFILE</Button>
        <div className="flex items-center gap-4">
          <div className="w-72 relative">
            <FormField
              id="policy-filter"
              label=""
              placeholder="Filter by Name, Path and more"
              value={filterTerm}
              onChange={(e) => setFilterTerm(e.target.value)}
              wrapperClassName="!mb-0"
            />
            <Icon name="fas fa-bars" className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400" />
          </div>
        </div>
      </div>

      <div className="overflow-x-auto border rounded-lg dark:border-gray-700">
        <table className="min-w-full">
          <thead className="bg-gray-50 dark:bg-slate-700">
            <tr>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[25%]">Name</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[15%]">Attributes</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[30%]">Description</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Tags</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase">Where Used</th>
              <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase w-[15%]">Status</th>
            </tr>
          </thead>
          <tbody className="bg-white dark:bg-slate-800 divide-y divide-gray-200 dark:divide-gray-700">
            {paginatedProfiles.map(profile => (
              <tr key={profile.id}>
                <td className="px-4 py-3 text-sm font-medium text-[#293c51] dark:text-gray-200">
                  <div className="flex items-center gap-3">
                    <Icon name="fas fa-ellipsis-v" className="text-gray-400 cursor-pointer" />
                    <Icon name="far fa-file-alt" className="text-gray-500" />
                    {profile.isSystemDefined && <Icon name="fas fa-lock" className="text-gray-500" title="System Defined" />}
                    <span>{profile.name}</span>
                  </div>
                </td>
                <td className="px-4 py-3 text-sm">
                  <a href="#" className="text-sky-500 hover:underline">{profile.attributes}</a>
                </td>
                <td className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">{profile.description}</td>
                <td className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">{profile.tags}</td>
                <td className="px-4 py-3 text-sm text-gray-500 dark:text-gray-400">{profile.whereUsed}</td>
                <td className="px-4 py-3 text-sm">
                  <div className="flex items-center gap-2 text-green-600 dark:text-green-400">
                    <Icon name="fas fa-check-circle" />
                    <span className="font-semibold">Success</span>
                    <Icon name="fas fa-sync-alt" className="text-sky-500 cursor-pointer" />
                  </div>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      <div className="flex justify-between items-center py-3 px-4">
        <Button variant="ghost" size="sm" onClick={handleRefresh} disabled={isRefreshing}>
          <Icon name={`fas fa-sync-alt ${isRefreshing ? 'fa-spin' : ''}`} className="text-sky-500 mr-2" /> REFRESH
        </Button>
        <Pagination
            currentPage={currentPage}
            totalItems={filteredProfiles.length}
            itemsPerPage={rowsPerPage}
            onPageChange={setCurrentPage}
            onItemsPerPageChange={setRowsPerPage}
            className="border-t-0 !py-0 !px-0"
        />
      </div>
    </Card>
  );
};
